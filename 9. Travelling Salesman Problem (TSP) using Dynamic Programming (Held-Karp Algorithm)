from itertools import permutations

def tsp(graph, start=0):
    """Solves the Travelling Salesman Problem using brute-force (permutations)."""
    n = len(graph)
    vertices = list(range(n))
    min_cost = float("inf")
    best_path = []

    for perm in permutations(vertices):
        if perm[0] != start:
            continue
        
        cost = 0
        for i in range(n - 1):
            cost += graph[perm[i]][perm[i + 1]]
        cost += graph[perm[-1]][perm[0]]  # Return to start

        if cost < min_cost:
            min_cost = cost
            best_path = perm

    return min_cost, best_path

# Example graph (Adjacency Matrix)
graph = [
    [0, 10, 15, 20],
    [10, 0, 35, 25],
    [15, 35, 0, 30],
    [20, 25, 30, 0]
]

cost, path = tsp(graph)
print("Minimum cost:", cost)
print("Best path:", path)
