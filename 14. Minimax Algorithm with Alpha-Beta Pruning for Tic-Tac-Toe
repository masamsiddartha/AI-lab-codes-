import math

# Function to print the board
def print_board(board):
    for row in board:
        print(" | ".join(row))
        print("-" * 9)

# Function to check for a winner
def check_winner(board):
    for i in range(3):
        if board[i][0] == board[i][1] == board[i][2] and board[i][0] != " ":
            return board[i][0]
        if board[0][i] == board[1][i] == board[2][i] and board[0][i] != " ":
            return board[0][i]
    if board[0][0] == board[1][1] == board[2][2] and board[0][0] != " ":
        return board[0][0]
    if board[0][2] == board[1][1] == board[2][0] and board[0][2] != " ":
        return board[0][2]
    return None

# Function to check if the board is full
def is_full(board):
    return all(cell != " " for row in board for cell in row)

# Minimax with Alpha-Beta Pruning
def minimax(board, depth, alpha, beta, is_maximizing):
    winner = check_winner(board)
    if winner == "X":
        return -10 + depth
    elif winner == "O":
        return 10 - depth
    elif is_full(board):
        return 0

    if is_maximizing:
        best_score = -math.inf
        for i in range(3):
            for j in range(3):
                if board[i][j] == " ":
                    board[i][j] = "O"
                    score = minimax(board, depth + 1, alpha, beta, False)
                    board[i][j] = " "
                    best_score = max(score, best_score)
                    alpha = max(alpha, score)
                    if beta <= alpha:
                        break  # Prune branches
        return best_score
    else:
        best_score = math.inf
        for i in range(3):
            for j in range(3):
                if board[i][j] == " ":
                    board[i][j] = "X"
                    score = minimax(board, depth + 1, alpha, beta, True)
                    board[i][j] = " "
                    best_score = min(score, best_score)
                    beta = min(beta, score)
                    if beta <= alpha:
                        break  # Prune branches
        return best_score

# Function for AI move
def best_move(board):
    best_score = -math.inf
    move = None
    for i in range(3):
        for j in range(3):
            if board[i][j] == " ":
                board[i][j] = "O"
                score = minimax(board, 0, -math.inf, math.inf, False)
                board[i][j] = " "
                if score > best_score:
                    best_score = score
                    move = (i, j)
    return move

# Main game function
def tic_tac_toe():
    board = [[" " for _ in range(3)] for _ in range(3)]
    
    print("Tic-Tac-Toe with Minimax + Alpha-Beta Pruning AI!")
    print_board(board)
    
    for turn in range(9):
        if turn % 2 == 0:
            row, col = map(int, input("Enter row and column (0-2): ").split())
            if board[row][col] == " ":
                board[row][col] = "X"
            else:
                print("Invalid move! Try again.")
                continue
        else:
            print("AI is thinking...")
            row, col = best_move(board)
            board[row][col] = "O"
        
        print_board(board)
        
        winner = check_winner(board)
        if winner:
            print(f"{winner} wins!")
            return
    
    print("It's a draw!")

# Run the game
tic_tac_toe()
