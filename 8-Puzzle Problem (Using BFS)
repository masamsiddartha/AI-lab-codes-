from collections import deque

class Puzzle:
    def __init__(self, start, goal):
        self.start = start
        self.goal = goal
    
    def bfs(self):
        queue = deque([(self.start, [])])
        visited = set()
        while queue:
            state, path = queue.popleft()
            if state == self.goal:
                return path
            visited.add(tuple(state))
            for move in self.get_moves(state):
                new_state, move_name = move
                if tuple(new_state) not in visited:
                    queue.append((new_state, path + [move_name]))
        return None
    
    def get_moves(self, state):
        moves = []
        zero_idx = state.index(0)
        directions = {"UP": -3, "DOWN": 3, "LEFT": -1, "RIGHT": 1}
        for move, delta in directions.items():
            new_idx = zero_idx + delta
            if 0 <= new_idx < 9:
                new_state = state[:]
                new_state[zero_idx], new_state[new_idx] = new_state[new_idx], new_state[zero_idx]
                moves.append((new_state, move))
        return moves

# Example usage:
start_state = [1, 2, 3, 4, 0, 5, 6, 7, 8]  # 0 represents the empty space
goal_state = [1, 2, 3, 4, 5, 6, 7, 8, 0]
puzzle = Puzzle(start_state, goal_state)
solution = puzzle.bfs()
print("Solution steps:", solution)
